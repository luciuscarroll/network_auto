from typing import Optional
from pydantic import BaseModel
from typing import Optional

class DhcpBinding(Basemodel):
    mac_address: str = Optional[None]
    vrf: str = Optional[None]
    ip_address: str = Optional[None]
    server_vrf: str = Optional[None]
    giaddr_from_client: str = Optional[None]
    giaddr_to_server: str = Optional[None]
    server_ip_address_to_client: str = Optional[None]
    server_ip_address: str = Optional[None]
    received_circuit_id: str = Optional[None]
    insert_circuit_id: str = Optional[None]
    received_remote_id: str = Optional[None]
    inserted_remote_id: str = Optional[None]
    recieved_VSISO: str = Optional[None]
    inserted_VSISO: str = Optional[None]
    Auth_on_recieved_relay: str = Optional[None]
    param_request_option: str = Optional[None]
    saved_options: str = Optional[None]
    profile: str = Optional[None]
    state: str = Optional[None]
    lease: str = Optional[None]
    lease_remaining: str = Optional[None]
    client_id: str = Optional[None]
    access_interface: str = Optional[None]
    access_vrf: str = Optional[None]
    subsriber_label: str = Optional[None]
    srg_state: str = Optional[None]
    event_history: str = Optional[None]
    session_start: str = Optional[None]
    packet_discover: str = Optional[None]
    dpm_success: str = Optional[None]
    packet_offer: str = Optional[None]
    packet_request: str = Optional[None]
    packet_ack: str = Optional[None]
    lease_dpm_success: str = Optional[None]
    route_success: str = Optional[None]

class PhysicalInterface(BaseModel):
    transciever_type: str = Optional[None]
    transciever_part_number: str = Optional[None]
    laser_wavelength: str = Optional[None]
    transmit_power: str = Optional[None]
    recieve_power: str = Optional[None]
    vendor_name: str = Optional[None]
    interface: str = Optional[None]

